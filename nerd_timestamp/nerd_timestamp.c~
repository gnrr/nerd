/*
 * Filename: nerd_timestamp.c
 * Last modified: Sun Mar 19 2006 09:43:53 LMT
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <getopt.h>
#include <time.h>

/*
 * consts and externs
 */
const unsigned char HEAD[] ="\
/* Filename: timestamp.h       */\n\
/* generated by nerd_timestamp */\n\n\
\
/* product string descriptor */\n\
const uchar string_prod[] = {\n";

const unsigned char FOOT[] = "};\n\n";
const unsigned char PRETEXT[] = "nerd - built:";
const char CHARS = 20;

/* for options */
extern char *optarg;
extern int optind, opterr, optopt;

/*
 * global variables
 */
char *OutFileName;
_Bool UseInternalTime;

/*
 * function prototype declarations
 */
void error(void);
unsigned char *get_local_time_string(unsigned char *ptr);
unsigned char *get_time_string_from_stdin(unsigned char *ptr);
char get_stamp_string(unsigned char *dest, unsigned char *src);
void get_length_line(unsigned char *dest, unsigned char count);
_Bool opt_proc(int argc, char *argv[]);
int main(int argc, char *argv[]);


/*
 * function definitions
 */
void error(void)
{
    fprintf(stderr, "nerd_timestamp: generate timestamp.h for nerd project.\n");
    fprintf(stderr, "USAGE: nerd_timestamp {options}\n");
    fprintf(stderr, "       -o filename: output into filename\n");
    fprintf(stderr, "       -i         : use internal get_local_time\n");
    fprintf(stderr, "e.g.\n");
    fprintf(stderr, "nerd_timestamp -i -o timestamp.h\n");
    fprintf(stderr, "date +\"%%Y.%%m.%%d %%H:%%M:%%S\" | nerd_timestamp -o timestamp.h\n\n");
}

unsigned char *get_local_time_string(unsigned char *ptr)
{
    time_t now;
    struct tm *tl;

    time(&now);
    tl = localtime(&now);
    strftime(ptr, 255, "%Y.%m.%d %H:%M:%S", tl);
    return ptr;
}

unsigned char *get_time_string_from_stdin(unsigned char *ptr)
{
    unsigned char *pe;
    fgets(ptr, 255, stdin);
    pe = strchr(ptr, '\n');
    if(pe != NULL) {
        *pe = '\0';
    }
}

char get_stamp_string(unsigned char *dest, unsigned char *src)
{
    unsigned char *ptr;
    unsigned char cntp;
    int i, cnt;
    unsigned char ch;

    cnt = cntp = 0;

    *dest++ = '\t';
    ptr = &PRETEXT[0];
    while(1) {
        ch = *ptr++;
        if(ch == 0) break;

        *dest++ = '\'';
        *dest++ = ch;
        *dest++ = '\'';
        *dest++ = ',';
        *dest++ = '0';
        *dest++ = ',';
        cntp += 2;
        if((cntp % CHARS) == 0) {
            *dest++ = '\n';
            *dest++ = '\t';
        } else {
            *dest++ = ' ';
        }
    }


    *dest++ = '\n';

    cnt = 0;
    while(1) {
        ch = *src++;
        if(ch == 0) break;

        if(cnt == 0) {
            *dest++ = '\t';
        }

        *dest++ = '\'';
        *dest++ = ch;
        *dest++ = '\'';
        *dest++ = ',';
        *dest++ = '0';

        cnt += 2;
        if((cnt % CHARS) == 0) {
            *dest++ = ',';
            *dest++ = '\n';
            *dest++ = '\t';
        } else {
            *dest++ = ',';
            *dest++ = ' ';
        }
    }

    dest -= 2;
    *dest++ = '\n';
    *dest++ = 0;

    return (cnt + cntp);
}

void get_length_line(unsigned char *dest, unsigned char count)
{
    sprintf(&dest[0], "\t%d, 0x03,\n", count + 2);
}

_Bool opt_proc(int argc, char *argv[])
{
    char opt;
    _Bool ret = true;

    opterr = 0;
    while(1) {
        opt = getopt(argc, argv, "io:");
        if(opt == -1) break;

        switch(opt) {
            case 'i': UseInternalTime = true; break;
            case 'o': OutFileName = optarg;   break;
            default:  ret = false;
        }
        optarg = NULL;
    }

    return ret;
}




int main(int argc, char *argv[])
{
    const int SIZE = 100;
    unsigned char buf[SIZE], stamp[SIZE*10], length[SIZE];
    unsigned char l;
    FILE *fp;

    /* process for options */
    OutFileName = NULL;
    UseInternalTime = false;
    if(opt_proc(argc, argv) == false) {
        error();
        return EXIT_FAILURE;
    }

    /* output file handle */
    if(OutFileName)
        fp = fopen(OutFileName, "w");
    else
        fp = stdout;

    if(fp==NULL) {
        fprintf(stderr, "can not open the file.\n");
        return EXIT_FAILURE;
    }

    /* input date string */
    if(UseInternalTime)
        get_local_time_string(&buf[0]);      /* use internal */
    else
        get_time_string_from_stdin(&buf[0]); /* from std-in */

    l = get_stamp_string(&stamp[0], &buf[0]);
    get_length_line(&length[0], l);

    fputs(HEAD, fp);
    fputs(length, fp);
    fputs(stamp, fp);
    fputs(FOOT, fp);
    fclose(fp);

    return EXIT_SUCCESS;
}

/* end of nerd_timestamp.c */
